{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Belo Scrapping Test: Gonzalo Maidana\n",
    "### step 1 - Bring Libraries\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "import re\n",
    "import json \n",
    "import pandas as pd\n",
    "import csv \n",
    "from io import StringIO\n",
    "from bs4 import BeautifulSoup \n",
    "import requests \n",
    "import time\n",
    "import numpy \n",
    "from datetime import timedelta"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### step 2 start coding â™¥"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "extracting ticker: JNJ\n",
      "https://finance.yahoo.com/quote/JNJ/financials?p=JNJ\n",
      "Getting URL data...\n",
      "formatting JSON Data from JNJ\n",
      " Processing TICKER : 1\n",
      " Processing TICKER : 2\n",
      " Processing TICKER : 3\n",
      "extracting ticker: BRK.B\n",
      "https://finance.yahoo.com/quote/BRK.B/financials?p=BRK.B\n",
      "Getting URL data...\n",
      "formatting JSON Data from BRK.B\n",
      " Processing TICKER : 1\n",
      " Processing TICKER : 2\n",
      " Processing TICKER : 3\n",
      "extracting ticker: JPM\n",
      "https://finance.yahoo.com/quote/JPM/financials?p=JPM\n",
      "Getting URL data...\n",
      "formatting JSON Data from JPM\n",
      " Processing TICKER : 1\n",
      " Processing TICKER : 2\n",
      " Processing TICKER : 3\n",
      "extracting ticker: MMM\n",
      "https://finance.yahoo.com/quote/MMM/financials?p=MMM\n",
      "Getting URL data...\n",
      "formatting JSON Data from MMM\n",
      " Processing TICKER : 1\n",
      " Processing TICKER : 2\n",
      " Processing TICKER : 3\n",
      "extracting ticker: ABBV\n",
      "https://finance.yahoo.com/quote/ABBV/financials?p=ABBV\n",
      "Getting URL data...\n",
      "formatting JSON Data from ABBV\n",
      " Processing TICKER : 1\n",
      " Processing TICKER : 2\n",
      " Processing TICKER : 3\n",
      "extracting ticker: DIS\n",
      "https://finance.yahoo.com/quote/DIS/financials?p=DIS\n",
      "Getting URL data...\n",
      "formatting JSON Data from DIS\n",
      " Processing TICKER : 1\n",
      " Processing TICKER : 2\n",
      " Processing TICKER : 3\n",
      "extracting ticker: T\n",
      "https://finance.yahoo.com/quote/T/financials?p=T\n",
      "Getting URL data...\n",
      "formatting JSON Data from T\n",
      " Processing TICKER : 1\n",
      " Processing TICKER : 2\n",
      " Processing TICKER : 3\n",
      "extracting ticker: PG\n",
      "https://finance.yahoo.com/quote/PG/financials?p=PG\n",
      "Getting URL data...\n",
      "formatting JSON Data from PG\n",
      " Processing TICKER : 1\n",
      " Processing TICKER : 2\n",
      " Processing TICKER : 3\n",
      "extracting ticker: LOW\n",
      "https://finance.yahoo.com/quote/LOW/financials?p=LOW\n",
      "Getting URL data...\n",
      "formatting JSON Data from LOW\n",
      " Processing TICKER : 1\n",
      " Processing TICKER : 2\n",
      " Processing TICKER : 3\n",
      "extracting ticker: CI\n",
      "https://finance.yahoo.com/quote/CI/financials?p=CI\n",
      "Getting URL data...\n",
      "formatting JSON Data from CI\n",
      " Processing TICKER : 1\n",
      " Processing TICKER : 2\n",
      " Processing TICKER : 3\n",
      "creating DataFrame...\n",
      "Importing CSV...\n",
      "operation succeeded! \n"
     ]
    }
   ],
   "source": [
    "\n",
    "headers={'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36'}\n",
    "tickers_list = [\"JNJ\", \"BRK.B\", \"JPM\", \"MMM\", \"ABBV\", \"DIS\", \"T\", \"PG\", \"LOW\", \"CI\"]\n",
    "main_url = 'https://finance.yahoo.com/quote/{}/financials?p={}'\n",
    "\n",
    "for index , value in enumerate(tickers_list):\n",
    "    print(f\"extracting ticker: {value}\")\n",
    "    url = url = main_url.format(value , value)\n",
    "    print(url)\n",
    "    \n",
    "    try:\n",
    "        response = requests.get(url , headers = headers , timeout = 5)\n",
    "        print(\"Getting URL data...\")\n",
    "        soup = BeautifulSoup(response.text , 'html.parser')\n",
    "        \n",
    "        \n",
    "        pattern = re.compile(r'\\s--\\sData\\s--\\s') # using RE from JSON formatted String  \n",
    "        script_data = soup.find('script' , text = pattern).contents[0] # --> gets one item from the list \n",
    "        start = script_data.find(\"context\")-2              # identifying the first character from the JSON \n",
    "        \n",
    "        print(f\"formatting JSON Data from {value}\")\n",
    "        json_data = json.loads(script_data[start:-12])\n",
    "        \n",
    "        q_incomestatements_is = json_data['context']['dispatcher']['stores']['QuoteSummaryStore']['incomeStatementHistoryQuarterly']['incomeStatementHistory']\n",
    "        q_cashflow_cf = json_data['context']['dispatcher']['stores']['QuoteSummaryStore']['cashflowStatementHistoryQuarterly']['cashflowStatements']\n",
    "        q_balancestatements_bs = json_data['context']['dispatcher']['stores']['QuoteSummaryStore']['balanceSheetHistoryQuarterly']['balanceSheetStatements']\n",
    "        \n",
    "\n",
    "        type_arrays = [q_incomestatements_is ,q_cashflow_cf ,q_balancestatements_bs ]\n",
    "        quarterly_stats = []\n",
    "        \n",
    "        for index , value in enumerate(type_arrays):\n",
    "            print(f\" Processing TICKER : {index + 1}\")\n",
    "            for rd in type_arrays[index]:\n",
    "                statement = {}\n",
    "                for key , val in rd.items():\n",
    "                    try:\n",
    "                        statement[key] = val['raw']\n",
    "                    except TypeError:\n",
    "                        continue\n",
    "                    except KeyError:\n",
    "                        continue\n",
    "                quarterly_stats.append(statement)\n",
    "                \n",
    "    except requests.exceptions.Timeout:\n",
    "        continue\n",
    "    except requests.exceptions.TooManyRedirects:\n",
    "        print(\"wrong URL trying a different one\")\n",
    "    except requests.exceptions.RequestException as e:\n",
    "        print(\"Catastrophic error\")\n",
    "        raise SystemExit(e)\n",
    "\n",
    "print(\"creating DataFrame...\")        \n",
    "myDataScrapped = quarterly_stats\n",
    "df = pd.DataFrame(myDataScrapped)\n",
    "\n",
    "df = pd.DataFrame(myDataScrapped , columns=['operatingIncome' ,'netIncomeFromContinuingOps' ,'retainedEarnings' ,  'changeInCash' ,  'netBorrowings' ,'endDate' ])    \n",
    "df['ScrapeDate'] = pd.to_datetime('today')\n",
    "\n",
    "print(\"Importing CSV...\")\n",
    "df = df.to_csv('file_scrapped_BELO.csv')\n",
    "print(\"operation succeeded! \")\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Gonzalo Maidana \n",
    "##### gonzalomaidana2000@gmail.com\n",
    "https://www.linkedin.com/in/gonzalo-maidana-03b127149/ "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
